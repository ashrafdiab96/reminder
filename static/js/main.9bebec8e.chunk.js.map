{"version":3,"sources":["types.js","components/Reminder/Reminder.js","actions/index.js","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDERS","Reminder","state","text","date","Date","render_reminder","reminders","props","className","map","reminder","moment","fromNow","onClick","remove_reminder","id","type","value","this","placeholder","onChange","e","setState","target","selected","showTimeSelect","timeFormat","dateFormat","timeCaption","add_reminder","clear_reminders","Component","connect","actionTypes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reminderReducer","action","read_cookie","Math","random","bake_cookie","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bebec8e.chunk.js","sourcesContent":["export const ADD_REMINDER = 'ADD_REMINDER';\r\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER';\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS';","import react, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {add_reminder, remove_reminder, clear_reminders} from '../../actions/index';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport moment from 'moment';\r\nimport './Reminder.css';\r\n\r\nclass Reminder extends Component {\r\n    state = {\r\n        text: '',\r\n        date: new Date()\r\n    };\r\n\r\n    render_reminder = () => {\r\n        const reminders = this.props.reminders;\r\n        return (\r\n            <div className=\"\">\r\n                {\r\n                    reminders.map(reminder => {\r\n                        return (\r\n                            <div key={reminder.id} className=\"my_reminders\">\r\n                                <h2 className=\"mine_reminder\">{reminder.text}</h2>\r\n                                <h5 className=\"mine_date\">{moment(new Date(reminder.date)).fromNow()}</h5>\r\n                                <span className=\"close\"\r\n                                    onClick={() => this.props.remove_reminder(reminder.id)}\r\n                                >X</span>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"logo\">\r\n                    <div className=\"p1\"></div>\r\n                    <div className=\"p2\"></div>\r\n                    <div className=\"p3\"></div>\r\n                    <div className=\"p4\"></div>\r\n                    <hr className=\"hr0\" />\r\n                    <hr className=\"hr1\" />\r\n                    <hr className=\"hr2\" />\r\n                    <hr className=\"hr3\" />\r\n                    <hr className=\"hr4\" />\r\n                </div>\r\n                <h2 className=\"todo\">What Should U Do?</h2>\r\n                <div className=\"reminders\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.text}\r\n                        className=\"reminder\"\r\n                        placeholder=\"What Should I Do?\"\r\n                        onChange={(e) => this.setState({text: e.target.value})}\r\n                    />\r\n                    <br />\r\n                    <DatePicker\r\n                        selected={this.state.date}\r\n                        onChange={(date) => {this.setState({date: date})}}\r\n                        showTimeSelect\r\n                        timeFormat=\"HH:mm\"\r\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                        timeCaption=\"time\"\r\n                        value={this.state.date}\r\n                        className=\"date\"\r\n                    />\r\n                    <div className=\"controls\">\r\n                        <button\r\n                            className=\"add\"\r\n                            onClick={() => {\r\n                                this.props.add_reminder(this.state.text, this.state.date);\r\n                                this.setState({text: '', date: new Date()});\r\n                            }}\r\n                        >\r\n                                Add Reminder\r\n                        </button>\r\n                        <br />\r\n                        {this.render_reminder()}\r\n                        <button className=\"clear\"\r\n                            onClick={() => this.props.clear_reminders()}>Clear Reminders\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default connect(state => {return {reminders: state}}, {add_reminder, remove_reminder, clear_reminders})(Reminder);","import * as actionTypes from '../types';\r\n\r\nexport const add_reminder = (text, date) => {\r\n    const action = {\r\n        type: actionTypes.ADD_REMINDER,\r\n        text,\r\n        date\r\n    }\r\n    return action;\r\n};\r\n\r\nexport const remove_reminder = (id) => {\r\n    const action = {\r\n        type: actionTypes.REMOVE_REMINDER,\r\n        id\r\n    };\r\n    return action;\r\n};\r\n\r\nexport const clear_reminders = () => {\r\n    const action = {\r\n        type: actionTypes.CLEAR_REMINDERS\r\n    };\r\n    return action;\r\n};","import Reminder from './components/Reminder/Reminder';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Reminder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from '../types';\r\nimport { bake_cookie, read_cookie, delete_cookie } from 'sfcookies';\r\n\r\nconst reminderReducer = (state = [], action) => {\r\n    let reminders = [];\r\n    state = read_cookie(\"reminder\");\r\n    switch(action.type) {\r\n        case actionTypes.ADD_REMINDER:\r\n            reminders = [...state, {text: action.text, date: action.date, id: Math.random()}];\r\n            bake_cookie(\"reminder\", reminders);\r\n            return reminders;\r\n        case actionTypes.REMOVE_REMINDER:\r\n            reminders = state.filter(reminder => reminder.id !== action.id);\r\n            bake_cookie(\"reminder\", reminders);\r\n            return reminders;\r\n        case actionTypes.CLEAR_REMINDERS:\r\n            reminders = [];\r\n            bake_cookie(\"reminder\", reminders);\r\n            return reminders;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reminderReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reminderReducer from './reducers/index';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n// import 'bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(reminderReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}